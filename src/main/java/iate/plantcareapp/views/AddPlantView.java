package iate.plantcareapp.views;

import iate.plantcareapp.dao.PlantDao;
import iate.plantcareapp.models.Plant;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;

public class AddPlantView {

    // DAO –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    private final PlantDao plantDao = new PlantDao();

    // –ú–µ—Ç–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
    public void showAddPlantForm(Runnable onPlantAdded) {
        Stage stage = new Stage();
        stage.setTitle("–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ");

        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(20));
        grid.setHgap(15);
        grid.setVgap(15);

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        ColumnConstraints col1 = new ColumnConstraints();
        col1.setPercentWidth(30);
        ColumnConstraints col2 = new ColumnConstraints();
        col2.setPercentWidth(50);
        ColumnConstraints col3 = new ColumnConstraints();
        col3.setPercentWidth(20);
        grid.getColumnConstraints().addAll(col1, col2, col3);

        // –ü–æ–ª—è –≤–≤–æ–¥–∞
        TextField nameField = new TextField(); // –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
        TextArea notesArea = new TextArea();   // –ó–∞–º–µ—Ç–∫–∏
        notesArea.setPrefRowCount(4);
        TextField wateringField = new TextField();     // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞
        TextField fertilizingField = new TextField();  // –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–¥–æ–±—Ä–µ–Ω–∏—è
        TextField imagePathField = new TextField();    // –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        imagePathField.setEditable(false);             // –ó–∞–ø—Ä–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è –≤—Ä—É—á–Ω—É—é

        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        Button browseButton = new Button("üì∑");
        browseButton.setTooltip(new Tooltip("–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"));

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        /*
        browseButton.setOnAction(e -> {
            FileChooser fileChooser = new FileChooser();
            fileChooser.setTitle("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");

            File selectedFile = fileChooser.showOpenDialog(stage);
            if (selectedFile != null) {
                try {
                    String imageName = selectedFile.getName();

                    // –ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞
                    File projectRoot = new File(System.getProperty("user.dir"));
                    File imagesDir = new File(projectRoot, "src/main/resources/images");
                    if (!imagesDir.exists()) {
                        imagesDir.mkdirs(); // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    }

                    File destFile = new File(imagesDir, imageName);

                    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
                    if (!destFile.exists()) {
                        java.nio.file.Files.copy(
                                selectedFile.toPath(),
                                destFile.toPath(),
                                java.nio.file.StandardCopyOption.REPLACE_EXISTING
                        );
                    }

                    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
                    String relativePath = "images\\" + imageName;
                    imagePathField.setText(relativePath);

                } catch (Exception ex) {
                    showAlert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: " + ex.getMessage());
                    ex.printStackTrace();
                }
            }
        });
        */
        
    browseButton.setOnAction(e -> {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
        fileChooser.getExtensionFilters().addAll(
            new FileChooser.ExtensionFilter("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg", "*.jpeg", "*.png")
        );

        File selectedFile = fileChooser.showOpenDialog(stage);
        if (selectedFile != null) {
            try {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ resources –≤ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞—Ö
                File resourcesDir = new File("src/main/resources/images");
                if (!resourcesDir.exists()) {
                    resourcesDir.mkdirs();
                }

                // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ src/main/resources/images/
                String imageName = selectedFile.getName();
                File destFile = new File(resourcesDir, imageName);
                Files.copy(selectedFile.toPath(), destFile.toPath(), 
                          StandardCopyOption.REPLACE_EXISTING);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ images/–∏–º—è_—Ñ–∞–π–ª–∞
                imagePathField.setText("images/" + imageName);

                // System.out.println("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤: " + destFile.getAbsolutePath());

            } catch (Exception ex) {
                showAlert("Error during copying image: " + ex.getMessage());
                ex.printStackTrace();
            }
        }
    });
        
        // –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
        Button saveButton = new Button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å");
        Button cancelButton = new Button("‚ùå –û—Ç–º–µ–Ω–∞");

        // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
        saveButton.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white;");
        cancelButton.setStyle("-fx-background-color: #f44336; -fx-text-fill: white;");

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        saveButton.setOnAction(e -> {
            try {
                // –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
                String name = nameField.getText();
                String notes = notesArea.getText();
                int wateringDays = Integer.parseInt(wateringField.getText());
                int fertilizingDays = Integer.parseInt(fertilizingField.getText());
                String imagePath = imagePathField.getText();

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∏–º—è
                if (name.isBlank()) {
                    showAlert("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
                    return;
                }

                // –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è
                Plant newPlant = new Plant(
                        0, name, notes, imagePath,
                        wateringDays, fertilizingDays
                );

                plantDao.addPlant(newPlant); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î

                if (onPlantAdded != null) onPlantAdded.run(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
                stage.close(); // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞

            } catch (NumberFormatException ex) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –≤–≤–æ–¥–µ —á–∏—Å–µ–ª
                showAlert("–ü–µ—Ä–∏–æ–¥—ã –ø–æ–ª–∏–≤–∞ –∏ —É–¥–æ–±—Ä–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.");
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        cancelButton.setOnAction(e -> stage.close());

        // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Å–µ—Ç–∫–µ
        grid.add(new Label("–ù–∞–∑–≤–∞–Ω–∏–µ:"), 0, 0);
        grid.add(nameField, 1, 0, 2, 1);

        grid.add(new Label("–ó–∞–º–µ—Ç–∫–∏:"), 0, 1);
        grid.add(notesArea, 1, 1, 2, 1);

        grid.add(new Label("–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞ (–¥–Ω–µ–π):"), 0, 2);
        grid.add(wateringField, 1, 2);

        grid.add(new Label("–ò–Ω—Ç–µ—Ä–≤–∞–ª —É–¥–æ–±—Ä–µ–Ω–∏—è (–¥–Ω–µ–π):"), 0, 3);
        grid.add(fertilizingField, 1, 3);

        grid.add(new Label("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:"), 0, 4);
        grid.add(imagePathField, 1, 4);
        grid.add(browseButton, 2, 4);

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        HBox buttonBox = new HBox(10, saveButton, cancelButton);
        buttonBox.setAlignment(Pos.CENTER_RIGHT);
        grid.add(buttonBox, 1, 5, 2, 1);

        // –û–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤ BorderPane —Å —Ñ–æ–Ω–æ–º
        BorderPane root = new BorderPane();
        root.setCenter(grid);
        root.setStyle("-fx-background-color: #f0f8ff;");

        // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã
        Scene scene = new Scene(root, 640, 400);
        stage.setScene(scene);
        stage.show();
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    private void showAlert(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("–û—à–∏–±–∫–∞");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
