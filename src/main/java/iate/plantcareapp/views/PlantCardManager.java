package iate.plantcareapp.views;

import iate.plantcareapp.dao.PlantDao;
import iate.plantcareapp.models.Plant;
import java.io.File;
import java.io.FileInputStream;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;

import java.io.InputStream;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Comparator;
import java.util.List;

public class PlantCardManager {

    private final GridPane grid;
    private final MainView mainView;
    private final PlantDao plantDao = new PlantDao();

    public PlantCardManager(GridPane grid, MainView mainView) {
        this.grid = grid;
        this.mainView = mainView;
    }
    
    // –û–±–Ω–æ–≤–ª–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    public void refreshPlants() {
        grid.getChildren().clear();
        List<Plant> plants = plantDao.getAllPlants();
        plants.sort(Comparator.comparing(Plant::getName));

        int col = 0, row = 0;
        for (Plant plant : plants) {
            VBox card = createPlantCard(plant);
            grid.add(card, col, row);
            col++;
            if (col == 3) {
                col = 0;
                row++;
            }
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    public void updatePlantCard(Plant plant) {
        for (Node node : grid.getChildren()) {
            if (node instanceof VBox card) {
                Label nameLabel = (Label) card.getChildren().get(1);
                if (nameLabel.getText().equals(plant.getName())) {
                    Label wateringLabel = (Label) card.getChildren().get(2);
                    long daysToWater = ChronoUnit.DAYS.between(LocalDate.now(), plant.getLastWatered().plusDays(plant.getWateringIntervalDays()));
                    wateringLabel.setText((daysToWater <= 0) ? "‚ùó –ü–æ–ª–µ–π—Ç–µ —Å–µ–π—á–∞—Å" : "üíß –ü–æ–ª–µ–π—Ç–µ —á–µ—Ä–µ–∑: " + daysToWater + " –¥–Ω–µ–π(-—è)");
                    wateringLabel.setTextFill(daysToWater <= 0 ? Color.RED : Color.BLUE);

                    Label fertilizingLabel = (Label) card.getChildren().get(3);
                    long daysToFertilize = ChronoUnit.DAYS.between(LocalDate.now(), plant.getLastFertilized().plusDays(plant.getFertilizingIntervalDays()));
                    fertilizingLabel.setText((daysToFertilize <= 0) ? "‚ùó –£–¥–æ–±—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å" : "üåø –£–¥–æ–±—Ä–∏—Ç–µ —á–µ—Ä–µ–∑: " + daysToFertilize + " –¥–Ω–µ–π(-—è)");
                    fertilizingLabel.setTextFill(daysToFertilize <= 0 ? Color.RED : Color.GREEN);

                    break;
                }
            }
        }
    }
    
    // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç–æ—á–∫–∏
    private VBox createPlantCard(Plant plant) {
        VBox box = new VBox();
        box.setSpacing(5);
        box.setPadding(new Insets(10));
        box.setAlignment(Pos.CENTER);
        box.setPrefSize(200, 200);

        String normalStyle = "-fx-border-color: lightgray; -fx-border-radius: 5; -fx-background-radius: 5; -fx-background-color: white;";
        String hoverStyle = "-fx-border-color: #4CAF50; -fx-border-radius: 5; -fx-background-radius: 5; -fx-background-color: #f9fff9; -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.2), 10, 0, 0, 3);";
        box.setStyle(normalStyle);

        box.setOnMouseEntered(e -> box.setStyle(hoverStyle));
        box.setOnMouseExited(e -> box.setStyle(normalStyle));
        box.setOnMouseClicked((MouseEvent e) -> new PlantsDetailView(mainView).showDetails(plant));
        
        /*
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º getResource –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ JAR –∏–ª–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            String imagePath = "/" + plant.getImagePath().replace("\\", "/"); // –î–æ–±–∞–≤–ª—è–µ–º / –≤ –Ω–∞—á–∞–ª–æ
            System.out.println("Trying to load image at path: " + imagePath);
            InputStream inputStream = getClass().getResourceAsStream(imagePath);

            if (inputStream != null) {
                Image image = new Image(inputStream, 100, 100, true, true);
                ImageView imageView = new ImageView(image);
                box.getChildren().add(imageView);
            } else {
                box.getChildren().add(new Label("[No image found]"));
            }
        } catch (Exception e) {
            e.printStackTrace();
            box.getChildren().add(new Label("[Error loading image]"));
        }
        */
        
        try {
            // –ë–µ—Ä–µ–º –ø—É—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –ª–∏—à–Ω—é—é –ø–∞–ø–∫—É 'images' –≤ –Ω–∞—á–∞–ª–µ –ø—É—Ç–∏
            String imagePath = plant.getImagePath().replace("\\", "/"); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª—ç—à–∏
            // –ï—Å–ª–∏ –≤ –ø—É—Ç–∏ —É–∂–µ –µ—Å—Ç—å –ª–∏—à–Ω—è—è –ø–∞–ø–∫–∞ images, —É–±–∏—Ä–∞–µ–º –µ–µ
            if (imagePath.startsWith("images/")) {
                imagePath = imagePath.substring("images/".length());
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–∞–ø–∫–∏ src/main/resources/images
            File imageFile = new File("src/main/resources/images/" + imagePath); // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            System.out.println("Trying to load image at path: " + imageFile.getAbsolutePath());

            if (imageFile.exists()) {
                // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
                InputStream inputStream = new FileInputStream(imageFile);
                Image image = new Image(inputStream, 100, 100, true, true);
                ImageView imageView = new ImageView(image);
                box.getChildren().add(imageView);
                System.out.println("Loaded image from file system: " + imageFile.getAbsolutePath());
            } else {
                // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                System.out.println("Image not found in file system: " + imageFile.getAbsolutePath());
                box.getChildren().add(new Label("[No image found]"));
            }
        } catch (Exception e) {
            e.printStackTrace();
            box.getChildren().add(new Label("[Error loading image]"));
        }

        Label nameLabel = new Label(plant.getName());
        nameLabel.setFont(new Font(16));
        box.getChildren().add(nameLabel);

        long daysToWater = ChronoUnit.DAYS.between(LocalDate.now(), plant.getLastWatered().plusDays(plant.getWateringIntervalDays()));
        Label wateringLabel = new Label((daysToWater <= 0) ? "‚ùó –ü–æ–ª–µ–π—Ç–µ —Å–µ–π—á–∞—Å" : "üíß –ü–æ–ª–µ–π—Ç–µ —á–µ—Ä–µ–∑: " + daysToWater + " –¥–Ω–µ–π(-—è)");
        wateringLabel.setFont(new Font(12));
        wateringLabel.setTextFill(daysToWater <= 0 ? Color.RED : Color.BLUE);
        box.getChildren().add(wateringLabel);

        long daysToFertilize = ChronoUnit.DAYS.between(LocalDate.now(), plant.getLastFertilized().plusDays(plant.getFertilizingIntervalDays()));
        Label fertilizingLabel = new Label((daysToFertilize <= 0) ? "‚ùó –£–¥–æ–±—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å" : "üåø –£–¥–æ–±—Ä–∏—Ç–µ —á–µ—Ä–µ–∑: " + daysToFertilize + " –¥–Ω–µ–π(-—è)");
        fertilizingLabel.setFont(new Font(12));
        fertilizingLabel.setTextFill(daysToFertilize <= 0 ? Color.RED : Color.GREEN);
        box.getChildren().add(fertilizingLabel);

        return box;
    }
}
